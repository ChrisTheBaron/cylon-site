#!/usr/bin/env ruby

require 'bundler'
Bundler.setup

require 'git'
require 'fileutils'

if ARGV.any?
  REPOS = ARGV.collect do |arg|
    if arg[/^([\w-]+\/[\w-]+)$/, 1]
      "https://github.com/#{arg}.git"
    else
      arg
    end
  end
else
  REPOS = %w(
    https://github.com/hybridgroup/cylon-ardrone.git
    https://github.com/hybridgroup/cylon-audio.git
    https://github.com/hybridgroup/cylon-beaglebone.git
    https://github.com/hybridgroup/cylon-ble.git
    https://github.com/hybridgroup/cylon-crazyflie.git
    https://github.com/hybridgroup/cylon-digispark.git
    https://github.com/hybridgroup/cylon-firmata.git
    https://github.com/hybridgroup/cylon-force.git
    https://github.com/hybridgroup/cylon-hue.git
    https://github.com/hybridgroup/cylon-intel-iot.git
    https://github.com/hybridgroup/cylon-joystick.git
    https://github.com/hybridgroup/cylon-keyboard.git
    https://github.com/hybridgroup/cylon-leapmotion.git
    https://github.com/hybridgroup/cylon-m2x.git
    https://github.com/hybridgroup/cylon-mqtt.git
    https://github.com/hybridgroup/cylon-nest.git
    https://github.com/hybridgroup/cylon-neurosky.git
    https://github.com/hybridgroup/cylon-ollie.git
    https://github.com/hybridgroup/cylon-opencv.git
    https://github.com/hybridgroup/cylon-pebble.git
    https://github.com/hybridgroup/cylon-pinoccio.git
    https://github.com/hybridgroup/cylon-powerup.git
    https://github.com/hybridgroup/cylon-rapiro.git
    https://github.com/hybridgroup/cylon-raspi.git
    https://github.com/hybridgroup/cylon-skynet.git
    https://github.com/hybridgroup/cylon-spark.git
    https://github.com/hybridgroup/cylon-speech.git
    https://github.com/hybridgroup/cylon-sphero.git
    https://github.com/hybridgroup/cylon-tessel.git
    https://github.com/hybridgroup/cylon-wiced-sense.git
  )
end

def page(content)
  lines = []
  content.each_line do |line|
    lines << line
  end

  #remove everthing after ## Documention in the readme
  i = 0
  n = 0
  readme = []
  while i < lines.length
    if lines[i].include? "## Documentation"
      lines = readme[2..-1]
      break
    end
    readme << lines[i]
    i += 1
  end

  # convert markdown syntax for haml
  i=0
  while i < lines.length
    if lines[i].include? "```"
      if lines[i].include? "```\n"
        lines[i]=""
      else
        lines[i] = "\s\s\s\s:::#{lines[i][3..-1]}"
      end
      n = 0
      i += 1
      while n < lines[i..-1].length
        if lines[n+i].include? "```"
          lines[n+i] = "\n"
          i = n+i
          break
        else
            lines[n+i] = "\s\s\s\s#{lines[n+i]}"
            n += 1
        end
      end
    end
    i += 1
  end

  # indent by four spaces
  content = lines.join("").gsub! /^(.+)/, '    \1'
  #content.gsub("## How to Install", "")

  page_content = <<-EOS
%section.how-to
  :markdown
#{content}
EOS
end

# Public: Gets the name of the repository from it's GitHub clone URI
#
# uri - string git clone URI to extract a name from
#
# Examples
#
#   get_repo_name "https://github.com/hybridgroup/cylon-ardrone.git"
#   #=> "cylon-ardrone"
#
#   get_repo_name "git@github.com:hybridgroup/cylon.git"
#   #=> "cylon"
#
#   get_repo_name ""
#   #=> nil
#
# Returns a string or nil if it couldn't be parsed
def get_repo_name(uri)
  uri[/.*\/(.*).git/, 1]
end

# Public: Uses the git gem to clone down a remote git repository
#
# uri - string URI of remote git repo to clone down
#
# Returns an array containing the path to the cloned repository, and the Git
# repository instance
def clone_repo(uri)
  name = get_repo_name(uri)
  path = File.expand_path("#{__dir__}/../.docs/#{name}")

  FileUtils.rm_rf(path) if File.directory?(path)

  puts "  - Cloning #{name}."
  repo = Git.clone(uri, path)
 repo.checkout 'readme-import'
  return [path, repo]
end

def extract_docs_from_repo(path)
  docs = {}

  puts "  - Importing docs from #{File.basename(path)}"

  Dir.glob(path + "/README.md") do |file|
    contents = File.read(file)
    filename = File.basename(file)
    docs[filename] = contents
    puts "    - #{filename}"
  end

  docs
end

def add_docs_to_site(repo_name, docs)
  return if docs == {}
  docs_path = File.expand_path("#{__dir__}/../source/documentation/platforms/partials/")

  FileUtils.rm_rf docs_path + "/*.html.haml"

  docs.each do |name, content|
    filename = "_" + repo_name[/^cylon-(.*)$/, 1] + ".html.haml"
    path = File.join docs_path, filename

    content = content.force_encoding("UTF-8")

    File.write path, page(content)
  end
end

def main
  REPOS.each do |repo|
    name = get_repo_name(repo)
    puts "Importing docs from #{name}."

    path, repo = clone_repo repo

    docs = extract_docs_from_repo path
    add_docs_to_site name, docs

    FileUtils.rm_rf path
  end
end

main
