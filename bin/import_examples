#!/usr/bin/env ruby

require 'bundler'
Bundler.setup

require 'git'
require 'fileutils'

if ARGV.any?
  REPOS = ARGV.collect do |arg|
    arg[/^([\w-]+\/[\w-]+)$/, 1] ? "https://github.com/#{arg}.git" : arg
  end
else
  REPOS = %w(
    https://github.com/hybridgroup/cylon.git
    https://github.com/hybridgroup/cylon-ardrone.git
    https://github.com/hybridgroup/cylon-beaglebone.git
    https://github.com/hybridgroup/cylon-crazyflie.git
    https://github.com/hybridgroup/cylon-digispark.git
    https://github.com/hybridgroup/cylon-firmata.git
    https://github.com/hybridgroup/cylon-force.git
    https://github.com/hybridgroup/cylon-glass.git
    https://github.com/hybridgroup/cylon-gpio.git
    https://github.com/hybridgroup/cylon-i2c.git
    https://github.com/hybridgroup/cylon-joystick.git
    https://github.com/hybridgroup/cylon-keyboard.git
    https://github.com/hybridgroup/cylon-leapmotion.git
    https://github.com/hybridgroup/cylon-opencv.git
    https://github.com/hybridgroup/cylon-pebble.git
    https://github.com/hybridgroup/cylon-raspi.git
    https://github.com/hybridgroup/cylon-rapiro.git
    https://github.com/hybridgroup/cylon-skynet.git
    https://github.com/hybridgroup/cylon-spark.git
    https://github.com/hybridgroup/cylon-sphero.git
    https://github.com/hybridgroup/cylon-tessel.git
  )
end

INDENTED_CODE_REGEX = / # Match a MARKDOWN CODE section.
  (\r?\n)              # $1: CODE must be preceded by blank line
  (                    # $2: CODE contents
    (?:                # Group for multiple lines of code.
      (?:\r?\n)+       # Each line preceded by a newline,
      (?:[ ]{4}|\t).*  # and begins with four spaces or tab.
    )+                 # One or more CODE lines
    \r?\n              # CODE folowed by blank line.
  )                    # End $2: CODE contents
  (?=\r?\n)?           # CODE folowed by blank line.
  /x


class Example
  attr_reader :path, :title, :name, :content, :js_content

  def initialize(filename)
    @path = filename
    @repo = filename[/\.examples\/([a-zA-Z-]+)\//, 1]
    @content = File.read(filename)
    @name = filename[/\/([0-9A-Za-z_-]+)\.markdown$/, 1]
    @title = @content[/\A#\s+(.+)$/, 1]
    @js_content = File.read(filename.gsub(/markdown$/, 'js'))
  end

  def literate_page
    body = @content.dup

    # mark all indented blocks for syntax highlighting
    body.gsub! INDENTED_CODE_REGEX do |code|
      code.gsub! /\A\n+/, "\n\n    :::javascript\n"
      code
    end

    # escape interpolation as to not confuse HAML
    body.gsub! /(#\{)/, "\\\#{"

    # change import path for cylon
    body.gsub! /\.\.\/\.\./, 'cylon'

    # indent by two spaces
    body.gsub! /^(.+)/, '  \1'

    <<-EOS
---
layout: documentation
page_title_show: true
title: Cylon.JS Example - #{@title}
page_title: "Example: #{@title}"
author: The Hybrid Group
description: A Cylon.JS code example
page_subtitle: "<a href='https://github.com/hybridgroup/#{@repo}/tree/master/examples/#{@name}' target='_blank'>View In Repo</a>"
---

:markdown
#{body}
EOS
  end

  def js_page
    body = @js_content.dup

    # change import path for cylon
    body.gsub! /\.\.\/\.\./, 'cylon'

    # indent by eight spaces
    body.gsub! /^(.+)/, '        \1'

    page_content = <<-EOS
---
layout: documentation
page_title_show: true
title: Cylon.JS Example - #{@title}
page_title: "Example: #{@title}"
author: The Hybrid Group
description: A Cylon.JS code example
page_subtitle: "<a href='https://github.com/hybridgroup/#{@repo}/tree/master/examples/#{@name}' target='_blank'>View In Repo</a>"
---

.example
  :markdown
        :::javascript
#{body}
EOS

  end
end

# Public: Gets the name of the repository from it's GitHub clone URI
#
# uri - string git clone URI to extract a name from
#
# Examples
#
#   get_repo_name "https://github.com/hybridgroup/cylon-ardrone.git"
#   #=> "cylon-ardrone"
#
#   get_repo_name "git@github.com:hybridgroup/cylon.git"
#   #=> "cylon"
#
#   get_repo_name ""
#   #=> nil
#
# Returns a string or nil if it couldn't be parsed
def get_repo_name(uri)
  uri[/.*\/(.*).git/, 1]
end

# Public: Uses the git gem to clone down a remote git repository
#
# uri - string URI of remote git repo to clone down
#
# Returns an array containing the path to the cloned repository, and the Git
# repository instance
def clone_repo(uri)
  name = get_repo_name(uri)
  path = File.expand_path("#{__dir__}/../.examples/#{name}")

  FileUtils.rm_rf(path) if File.directory?(path)

  puts "  - Cloning #{name}."
  repo = Git.clone(uri, path)

  return [path, repo]
end

def extract_examples_from_repo(path)
  examples = []

  Dir.glob(path + "/examples/**/*.markdown") do |file|
    examples << Example.new(file)
  end

  examples
end

def remove_existing_examples(name)
  puts "  - Removing existing example pages."
  path = File.expand_path("#{__dir__}/../source/documentation/examples/#{name}")
  FileUtils.rm_rf path
end

def add_examples_to_site(name, examples)
  return unless examples.any?
  adaptor_name = name[/^cylon-(.*)$/, 1]
  name = adaptor_name if adaptor_name

  create_markdown_pages name, examples
  create_js_pages name, examples
  create_index_partial name, examples
end

def create_markdown_pages(name, examples)
  examples.each do |example|
    puts "  - #{example.title}"

    examples_dir = "/source/documentation/examples"
    filename = "/#{name}/annotated/#{example.name}.html.haml"

    path = File.expand_path(__dir__ + "/../" + examples_dir + filename)
    content = example.literate_page

    FileUtils.mkdir_p(File.dirname(path)) unless File.directory?(path)
    File.write(path, content)
  end
end

def create_js_pages(name, examples)
  examples.each do |example|
    puts "  - #{example.title}"

    examples_dir = "/source/documentation/examples"
    filename = "/#{name}/js/#{example.name}.html.haml"

    path = File.expand_path(__dir__ + "/../" + examples_dir + filename)
    content = example.js_page

    FileUtils.mkdir_p(File.dirname(path)) unless File.directory?(path)
    File.write(path, content)
  end
end

def create_index_partial(name, examples)
  path = File.expand_path "#{__dir__}/../source/documentation/examples/partials"
  filename = File.join(path, "/_#{name}.html.haml")

  FileUtils.mkdir_p(path) unless File.directory?(path)

  partial = <<-EOS

%h2 \#{name}
%table
  %thead
    %th Example
    %th.links{:colspan => '2'} Links
  %tbody
  EOS

  examples.each do |example|
    string = "%tr\n"
    string << "  %td #{example.title}\n"
    string << "  %td.links= link_to 'Code', '/documentation/examples/#{name}/js/#{example.name}'\n"
    string << "  %td.links= link_to 'Annotated Code', '/documentation/examples/#{name}/annotated/#{example.name}'\n"
    string.gsub! /^(.+)/, '    \1'
    partial << string
  end

  File.write(filename, partial)
end

def main
  REPOS.each do |repo|
    name = get_repo_name(repo)

    puts "Importing examples from #{name}."

    path, repo = clone_repo repo

    remove_existing_examples(name)

    examples = extract_examples_from_repo path

    add_examples_to_site name, examples

    FileUtils.rm_rf path
  end
end

main
