#!/usr/bin/env ruby

# Change project details here
Project = Struct
  .new(:name, :pretty_name, :language, :extension)
  .new('cylon', 'Cylon.JS', 'javascript', 'js')

require 'bundler'
Bundler.setup

require 'git'
require 'fileutils'

if ARGV.any?
  REPOS = ARGV.collect do |arg|
    arg[/^([\w-]+\/[\w-]+)$/, 1] ? "https://github.com/#{arg}.git" : arg
  end
else
  REPOS = %w(
    https://github.com/hybridgroup/cylon.git
    https://github.com/hybridgroup/cylon-ardrone.git
    https://github.com/hybridgroup/cylon-audio.git
    https://github.com/hybridgroup/cylon-beaglebone.git
    https://github.com/hybridgroup/cylon-ble.git
    https://github.com/hybridgroup/cylon-crazyflie.git
    https://github.com/hybridgroup/cylon-digispark.git
    https://github.com/hybridgroup/cylon-firmata.git
    https://github.com/hybridgroup/cylon-force.git
    https://github.com/hybridgroup/cylon-galileo.git
    https://github.com/hybridgroup/cylon-gpio.git
    https://github.com/hybridgroup/cylon-hue.git
    https://github.com/hybridgroup/cylon-i2c.git
    https://github.com/hybridgroup/cylon-intel-iot.git
    https://github.com/hybridgroup/cylon-joystick.git
    https://github.com/hybridgroup/cylon-keyboard.git
    https://github.com/hybridgroup/cylon-leapmotion.git
    https://github.com/hybridgroup/cylon-m2x.git
    https://github.com/hybridgroup/cylon-mqtt.git
    https://github.com/hybridgroup/cylon-nest.git
    https://github.com/hybridgroup/cylon-neurosky.git
    https://github.com/hybridgroup/cylon-ollie.git
    https://github.com/hybridgroup/cylon-opencv.git
    https://github.com/hybridgroup/cylon-pebble.git
    https://github.com/hybridgroup/cylon-pinoccio.git
    https://github.com/hybridgroup/cylon-powerup.git
    https://github.com/hybridgroup/cylon-rapiro.git
    https://github.com/hybridgroup/cylon-raspi.git
    https://github.com/hybridgroup/cylon-skynet.git
    https://github.com/hybridgroup/cylon-spark.git
    https://github.com/hybridgroup/cylon-speech.git
    https://github.com/hybridgroup/cylon-sphero.git
    https://github.com/hybridgroup/cylon-tessel.git
    https://github.com/hybridgroup/cylon-wiced-sense.git
  )
end

INDENTED_CODE_REGEX = / # Match a MARKDOWN CODE section.
  (\r?\n)              # $1: CODE must be preceded by blank line
  (                    # $2: CODE contents
    (?:                # Group for multiple lines of code.
      (?:\r?\n)+       # Each line preceded by a newline,
      (?:[ ]{4}|\t).*  # and begins with four spaces or tab.
    )+                 # One or more CODE lines
    \r?\n              # CODE folowed by blank line.
  )                    # End $2: CODE contents
  (?=\r?\n)?           # CODE folowed by blank line.
  /x

class Example
  attr_reader :path, :name, :content, :markdown_content

  def initialize(filename)
    @path = filename
    @repo = filename[/\.examples\/([a-zA-Z-]+)\//, 1]
    @name = File.basename(filename, ".#{Project.extension}")
    @content = File.read(filename)

    fluent_filename = @path.gsub(File.basename(@path), "fluent-#{File.basename(@path)}")
    markdown_filename = @path.gsub(/#{Project.extension}$/, 'markdown')

    if File.exists? markdown_filename
      @markdown_content = File.read(markdown_filename)
    end

    if File.exists? fluent_filename
      @fluent_content = File.read(fluent_filename)
    end
  end

  def markdown_version?
    !@markdown_content.nil?
  end

  def fluent_version?
    !@fluent_content.nil?
  end

  def title
    if markdown_version?
      @markdown_content[/\A#\s+(.+)$/, 1]
    else
      @name
    end
  end

  def fluent_page
    return unless fluent_version?
    body = @fluent_content.dup

    # change import path
    body.gsub! /\.\.\/\.\./, Project.name

    # indent by eight spaces
    body.gsub! /^(.+)/, '        \1'

    page_content = <<-EOS
---
layout: documentation
page_title_show: true
title: "#{Project.pretty_name} Fluent Example - #{title}"
page_title: "Example: #{title}"
author: The Hybrid Group
description: A #{Project.pretty_name} fluentcode example
page_subtitle: "<a href='https://github.com/hybridgroup/#{@repo}/tree/master/examples/#{@name}' target='_blank'>View In Repo</a>"
active_menu_docs: true
---
.example
  :markdown
        :::#{Project.language}
#{body}
EOS

  end

  def annotated_page
    return unless markdown_version?
    body = @markdown_content.dup

    # mark all indented blocks for syntax highlighting
    body.gsub! INDENTED_CODE_REGEX do |code|
      code.gsub! /\A\n+/, "\n\n    :::#{Project.language}\n"
      code
    end

    # escape interpolation as to not confuse HAML
    body.gsub! /(#\{)/, "\\\#{"

    # change import path
    body.gsub! /\.\.\/\.\./, Project.name

    # indent by two spaces
    body.gsub! /^(.+)/, '  \1'

    <<-EOS
---
layout: documentation
page_title_show: true
title: "#{Project.pretty_name} Example - #{title}"
page_title: "Example: #{title}"
author: The Hybrid Group
description: A #{Project.pretty_name} code example
page_subtitle: "<a href='https://github.com/hybridgroup/#{@repo}/tree/master/examples/#{@name}' target='_blank'>View In Repo</a>"
active_menu_docs: true
---
:markdown
#{body}
EOS
  end

  def code_page
    body = @content.dup

    # change import path
    body.gsub! /\.\.\/\.\./, Project.name

    # indent by eight spaces
    body.gsub! /^(.+)/, '        \1'

    page_content = <<-EOS
---
layout: documentation
page_title_show: true
title: "#{Project.pretty_name} Example - #{title}"
page_title: "Example: #{title}"
author: The Hybrid Group
description: A #{Project.pretty_name} code example
page_subtitle: "<a href='https://github.com/hybridgroup/#{@repo}/tree/master/examples/#{@name}' target='_blank'>View In Repo</a>"
active_menu_docs: true
---
.example
  :markdown
        :::#{Project.language}
#{body}
EOS

  end
end

# Public: Gets the name of the repository from it's GitHub clone URI
#
# uri - string git clone URI to extract a name from
#
# Examples
#
#   get_repo_name "https://github.com/hybridgroup/cylon-ardrone.git"
#   #=> "cylon-ardrone"
#
#   get_repo_name "git@github.com:hybridgroup/cylon.git"
#   #=> "cylon"
#
#   get_repo_name ""
#   #=> nil
#
# Returns a string or nil if it couldn't be parsed
def get_repo_name(uri)
  uri[/.*\/(.*).git/, 1]
end

# Public: Uses the git gem to clone down a remote git repository
#
# uri - string URI of remote git repo to clone down
#
# Returns an array containing the path to the cloned repository, and the Git
# repository instance
def clone_repo(uri)
  name = get_repo_name(uri)
  path = File.expand_path("#{__dir__}/../.examples/#{name}")

  FileUtils.rm_rf(path) if File.directory?(path)

  puts "  - Cloning #{name}."
  repo = Git.clone(uri, path)

  return [path, repo]
end

def extract_examples_from_repo(path)
  examples = Dir.glob(path + "/examples/*/*.#{Project.extension}")
  examples.reject! { |f| f.include?("fluent") || f.include?("imperative") }
  examples.map { |f| Example.new(f) }
end

def remove_existing_examples
  puts "  - Removing existing example pages."
  Dir.glob("#{__dir__}/../source/documentation/examples/*") do |path|
    if File.directory?(path)
      FileUtils.rm_rf(path)
    end
  end
end

def add_examples_to_site(name, examples)
  return unless examples.any?
  adaptor_name = name[/^#{Project.name}-(.*)$/, 1]
  name = adaptor_name if adaptor_name

  create_code_pages name, examples
  create_annotated_pages name, examples
  create_fluent_pages name, examples
  create_index_partial name, examples
end

def create_annotated_pages(name, examples)
  examples.each do |example|
    next unless example.markdown_version?
    examples_dir = "/source/documentation/examples"
    filename = "/#{name}/annotated/#{example.name}.html.haml"

    path = File.expand_path(__dir__ + "/../" + examples_dir + filename)
    content = example.annotated_page

    FileUtils.mkdir_p(File.dirname(path)) unless File.directory?(path)
    File.write(path, content)
  end
end

def create_fluent_pages(name, examples)
  examples.each do |example|
    next unless example.fluent_version?
    examples_dir = "/source/documentation/examples"
    filename = "/#{name}/fluent/#{example.name}.html.haml"

    path = File.expand_path(__dir__ + "/../" + examples_dir + filename)
    content = example.fluent_page

    FileUtils.mkdir_p(File.dirname(path)) unless File.directory?(path)
    File.write(path, content)
  end
end

def create_code_pages(name, examples)
  examples.each do |example|
    puts "  - #{example.title}"

    examples_dir = "/source/documentation/examples"
    filename = "/#{name}/#{Project.extension}/#{example.name}.html.haml"

    path = File.expand_path(__dir__ + "/../" + examples_dir + filename)
    content = example.code_page

    FileUtils.mkdir_p(File.dirname(path)) unless File.directory?(path)
    File.write(path, content)
  end
end

def create_index_partial(name, examples)
  path = File.expand_path "#{__dir__}/../source/documentation/examples/partials"
  filename = File.join(path, "/_#{name}.html.haml")

  FileUtils.mkdir_p(path) unless File.directory?(path)

  partial = <<-EOS

%h2 \#{name}
%table
  %thead
    %th Example
    %th.links{:colspan => '3'} Links
  %tbody
  EOS

  examples.each do |example|
    string = "%tr\n"
    string << "  %td #{example.title}\n"
    string << "  %td.links= link_to 'Code', '/documentation/examples/#{name}/#{Project.extension}/#{example.name}'\n"

    if example.fluent_version?
      string << "  %td.links= link_to 'Fluent JS', '/documentation/examples/#{name}/fluent/#{example.name}'\n"
    else
      string << "  %td.links\n"
    end

    if example.markdown_version?
      string << "  %td.links= link_to 'Annotated Code', '/documentation/examples/#{name}/annotated/#{example.name}'\n"
    else
      string << "  %td.links\n"
    end

    string.gsub! /^(.+)/, '    \1'
    partial << string
  end

  File.write(filename, partial)
end

def main
  remove_existing_examples

  REPOS.each do |repo|
    name = get_repo_name(repo)

    puts "Importing examples from #{name}."

    path, repo = clone_repo repo

    examples = extract_examples_from_repo path

    add_examples_to_site name, examples

    FileUtils.rm_rf path
  end
end

main
