#!/usr/bin/env node

"use strict";

var Promise = require("bluebird");

var path = require("path"),
    fs = Promise.promisifyAll(require("fs-extra"));

var updateRepos = require("./support/update-repos");

var pwd = __dirname;

var SOURCE = path.resolve(pwd, "./../.import"),
    DEST = path.resolve(pwd, "./../source/documentation/platforms/partials");

function main() {
  function cleanup() { return fs.deleteAsync(DEST).then(fs.en); }
  function notCore(pkg) { return pkg !== "cylon"; }

  cleanup()
    .then(updateRepos)
    .filter(notCore)
    .map(update);
}

function update(project) {
  var dest = DEST + "/_" + project.replace("cylon-", "") + ".html.haml",
      write = fs.outputFileAsync.bind(null, dest);

  load(project)
    .then(extract)
    .then(edisonFix)
    .then(codeBlocks)
    .then(indent)
    .then(generatePage)
    .then(write);
}

function load(project) {
  function read(file) {
    return fs.readFileAsync(path.join(SOURCE, project, file), "utf-8");
  }

  // handle both cases
  return read("README.md").catch(read.bind(null, "README.markdown"));
}

function extract(content) {
  var lines = content.split("\n").splice(2);

  var start = lines.indexOf("## How to Install"),
      end = lines.indexOf("## Documentation");

  if (end >= 0) {
    lines = lines.splice(start, (end - start));
  }

  return lines.join("\n");
}

function edisonFix(content) {
  var regex = /#### Setting up your Intel Galileo\n[\s\S]*#### Install MRAA/gim;
  return content.replace(regex, "#### Install MRAA");
}

function codeBlocks(content) {
  var regex = /```(\w+?)\n([\s\S]+?)\n```/gim;

  return content.replace(regex, function(str, lang, code) {
    code = code.replace(/^(.+)/gm, "    $1");
    return "    :::" + lang + "\n" + code;
  });
}

function indent(content) {
  return content.replace(/^(.+)/gm, "    $1");
}

function generatePage(content) {
  return [ "%section.how-to", "  :markdown", content ].join("\n");
}

main();
