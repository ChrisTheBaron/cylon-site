---
title: Cylon.js - Digispark - Guetting started
author: The Hybrid Group
description: Guetting started page for Cylon.js-digispark
page_title: Getting Started - Digispark
page_subtitle: A Guide by Humans, for Humans.
layout: page
---
.notice
  <b>Important</b>:  2012 MBP The USB ports on the 2012 MBPs (Retina and non) cause issues due to their USB3 controllers, currently the best work around is to use a cheap USB hub (non USB3) - we are working on future solutions. The hub on a Cinema display will work as well.
%section.intro
  %h1 What is Digispark?

  %p
    In order to know Digispark, and better undertand how it works, we must first learn a little bit 
    about the ruby micro framework for robotics used to interact with the Digispark platform.

  = partial "../documentation/what_is_cylon"

  %h2 The Digispark microcontroller

  = image_tag "/images/digispark.jpg", class: "display image-size-300"

  %p
    The Digispark is an Attiny85 based microcontroller development board similar to the Arduino line, only cheaper, smaller,
    and a bit less powerful. With a whole host of shields to extend its functionality and the ability to
    use the familiar Arduino IDE the Digispark is a great way to jump into electronics, or perfect for when
    an Arduino is too big or too much.

  %p
    For more info about the Digispark platform click
    = link_to "here", "http://digistump.com/category/1", target: :blank

%section.setup
  %h2 Setting up Digispark to work with Cylon.js
  %h3 Getting the Digispark hardware ready
  %p
    Before we start tinkering with Cylon.js, programs and manipulating our own robots, we must get our hands dirty
    and build our Digispark kit.

  %h4 Assembling your Digispark microcontroller
  %p
    =# TODO: Add process on how to assemble the digispark starter kit so user can use it with Cylon.js
    =# describe ans explain soldering process.
    %b TODO

  %h3 Installing Littlewire communication protocol in the Digispark
  %p
    First thing to do is to setup your Digispark microcontroller for communication with Cylon.js. Cylon.js communicates
    with the Digispark using the Littlewire communication protocol (
    = link_to "http://littlewire.cc/", "http://littlewire.cc/"
    ), so we have to make sure this protocol has been installed to the Digispark firmware, if this is the case, you
    can start working with Cylon.js right away.
  %p
    Nevertheless if the Digispark does not have the littlewire protocol installed yet, you can install it easily,
    by first installing the Cylon.js-digispark gem, and then running the command 'Cylon.js install digispark'. The 
    program will prompt you to plug in the Digispark, and then once you do, it will install the firmware automatically.

  %h3 Connecting digispark to your computer
  %p
    Now that we have the littlewire communication protocol installed in the Digispark we can use it with Cylon.js.
    When you plug it, you should be able to use it with Cylon.js.

  %h4 When using OSX
  %p
    =# TODO: Add info on how to connect digispark to USB to start using it with Cylon.js (get vendor and product).
    %b TODO

  %h4 When using Ubuntu
  %p
    =# TODO: Add info on how to connect digispark to USB to start using it with Cylon.js (get vendor and product).
    %b TODO

  %h4 When using Windows
  %p
    =# TODO: Add info on how to connect digispark to USB to start using it with Cylon.js (get vendor and product).
    %b TODO
%section.installation

  %h2 Installing Cylon.js and Cylon.js-digispark gems

  %p
    Installation is pretty simple, just install the Cylon.js-digispark gem and you are set.

  :markdown
        :::ruby
        gem install Cylon.js-digispark

  %h3 Writing your robot code:

  %p
    Now you are ready to write your own code. Take a look at the examples directory in the
    = link_to "Cylon.js-digispark", "https://github.com/hybridgroup/Cylon.js-digispark/tree/master/examples"
    github repository (or clone the repository to your computer),
    for a whole bunch of code you can use to help get started.
    We recommend using Test-Driven Robotics (TDR) with your preferred test frameworks.

  %h3 Running your robot:

  :markdown
        :::ruby
        ruby ./examples/blink.rb

%section.Cylon.js-code
  %h2 What the code looks like

  %h3 Example: Digispark with LED and a button, using the Littlewire protocol.

  :markdown
        :::ruby
        require 'Cylon.js'

        # Uses Digispark USB board (http://digistump.com/products/1) 
        # with Little Wire protocol (http://littlewire.cc)

        connection :digispark, :adaptor => :littlewire, :vendor => 0x1781, :product => 0x0c9f
        device :board, :driver => :device_info
        device :led, :driver => :led, :pin => 1

        work do
          puts "Firmware name: \#{board.firmware_name}"
          puts "Firmware version: \#{board.version}"

          every 1.second do
            led.toggle
          end
        end

%section.other-resources
  %h2 Additional resources
  %p
    We are building robust Cylon.js docs for each platform, you can check more details about digispark,
    Cylon.js support, available drivers and code examples in the following links.
    %ul
      %li
        = link_to "Digispark platform docs", "../documentation/platforms/digispark"
        %ul
          %li
            Drivers
            %ul
              %li= link_to "Buttons"              , "../documentation/drivers/button"
              %li= link_to "Led"                  , "../documentation/drivers/led"
              %li= link_to "Analog Sensors"       , "../documentation/drivers/analog-sensor"
              %li= link_to "Motor"                , "../documentation/drivers/motor"
              %li= link_to "Servo"                , "../documentation/drivers/servo"
              %li= link_to "Maxbotix Range Finder", "../documentation/drivers/maxbotix"
%section.contributing
  %h2 Contributing

  %p
    You can help Cylon.js grow by contributing your code, new drivers or platforms to the project, check the Github page
    = link_to "Cylon.js on github.","https://github.com/hybridgroup/Cylon.js" 

  %ul
    %li Fork it
    %li Create your feature branch (git checkout -b my-new-feature)
    %li Commit your changes (git commit -am 'Add some feature')
    %li Push to the branch (git push origin my-new-feature)
    %li Create new Pull Request

%section.footer
