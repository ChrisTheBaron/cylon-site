---
title: Cylon.js - Tessel Audio
author: The Hybrid Group
page_title: Tessel Module
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Tessel Audio
page_subtitle_docs: Module
layout: documentation
page_title_show: true
active_menu_docs: true
subnavjs: true

tessel_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#tessel li:nth-child(3)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  =image_tag "/images/devices/tessel-audio.jpg", class: "display"
  .info-intro
    %p Decode audio files or streams and output; record audio.
    %p Make your Tessel play a tune, or listen in...
    %ul
      %li Decodes MP3/AAC/WMA/MIDI/FLAC/Ogg Vorbis files
      %li Supports files and streams
      %li Supports both headphones and line-out
      %li Can record audio through an on-board microphone or line-in jack
  .clear

%section.how-to#HowToConnect
  %h2 How To Connect
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connections: [
            { name: 'tessel', adaptor: 'tessel' },
            { name: 'tessel_A', adaptor: 'tessel', port: 'A' },
          ],
          devices: [
            { name: 'button', driver: 'button', connection: 'tessel' },
            { name: 'audio', driver: 'audio-vs1053b', connection: 'tessel_A' },
          ],
        ...


%section.how-to#HowToUse
  %h2 How To Use
  %p Example using a Direct Pin.
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connections: [
            { name: 'tessel', adaptor: 'tessel' },
            { name: 'tessel_A', adaptor: 'tessel', port: 'A' },
          ],
          devices: [
            { name: 'button', driver: 'button', connection: 'tessel' },
            { name: 'audio', driver: 'audio-vs1053b', connection: 'tessel_A' },
          ],

          work: function(my) {
            var chunks = [];
            var recording = false;

            my.audio.on('error', function (err) {
              console.log(err)
            });

            // When we get data, push it into our array
            my.audio.on('data', function(data) {
              chunks.push(data);
            });

            console.log('Hold the config button to record...');

            my.button.on('push', function() {
              // Tell the audio module to start recording
              if (!recording) {
                my.audio.startRecording('voice', function(err) {
                  if (err) {
                    console.log("Error while startRecording: ", err);
                  }
                  console.log('Recording...');
                  recording = true;
                });
              }
            });

            // Once the button is released, stop recording
            my.button.on('release', function() {
              // Tell the audio module to stop recording
              console.log('stopping the recording...');
              recording = false;
              my.audio.stopRecording(function(err) {
                if (err) {
                  console.log("Error while stopRecording: ", err);
                }
                console.log('Playing it back...');
                // Concat the data and play it
                my.audio.play(Buffer.concat(chunks), function(err) {
                  if (err) {
                    console.log("Error during playback: ", err);
                  }
                  // When we're done playing, clear recordings
                  chunks = [];
                  console.log('Hold the config button to record...');
                });
              });
            });
          }
        }).start();



%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    = partial "documentation/partials/devices_platforms"
