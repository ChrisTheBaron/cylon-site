---
title: Cylon.js - Sphero Driver
author: The Hybrid Group
page_title: Sphero
page_subtitle: Driver
layout: page
---
.documentation
  %section.intro
    =image_tag "/images/sphero.jpg", class: "display"
    %p
      Allows user to interact with the Sphero robotic sphero using Artoo.

  %section.how-to
    %h2 How to establish a connection and setup the driver
    %p
      That is pretty simple once the Sphero is ready (connected and listening), you just need three lines of code and you are set,
      Artoo and the Sphero driver take care of the rest.
    :markdown
          :::ruby
          Cylon = require('cylon')

          Cylon.robot
            connection:
              name: 'sphero', adaptor: 'sphero', port: '/dev/rfcomm0'

            device:
              name: 'sphero', driver: 'sphero'

  %section.public-methods
    %h2 Commands:
  
    %function-name abortMacro
    %function-params ()
    %function-return  → (ID code , command number)
    %function-description 
    %br/
    %br/  
    %funtion-name  abortOrbBasicProgram
    %function-params ()
    %function-return  → Simple Response
    %function-description 
    %br/
    %br/  
    %funtion-name appendMacroChunck
    %function-params (MACRO Chunk)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name appendOrbBasicFragment
    %function-params (Area, Program Code)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name configureCollisionDetection
    %function-params (Meth,(Xt, Yt),(Xspd, Yspd),Dead)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name configureLocator
    %function-params (flag, x, y, Yaw Tare)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name detectCollisions 
    %function-params ()
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name eraseOrbBasicStorage
    %function-params (Area)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name executeOrbBasicProgram
    %function-params (Area, Start Line, Start Line)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name getApplicationConfigurationBlock
    %function-params ()
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name getConfigurationBlock
    %function-params (ID)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name getDeviceMode
    %function-params ()
    %function-return  → (Mode), options: 00h (Normal mode) | 01h (User Hack mode)
    %function-description  
    %br/
    %br/  
    %funtion-name getMacroStatus
    %function-params ()
    %function-return  → (ID code , cmd number, cmd number)
    %function-description  
    %br/
    %br/  
    %funtion-name getPermanentOptionFlags
    %function-params ()
    %function-return  → (FLAGS), options: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 6-31
    %function-description  
    %br/
    %br/  
    %funtion-name getRGB
    %function-params ()
    %function-return  → (red,green,blue) | (color)
    %function-description  
    %br/
    %br/  
    %funtion-name getTemporaryOptionFlags
    %function-params ()
    %function-return  → (FLAGS), options: 0 | 1-31
    %function-description  
    %br/
    %br/  
    %funtion-name reInitializeMacroExecutive
    %function-params ()
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name readLocator
    %function-params ()
    %function-return  → (XPOS, YPOS, XVEL, YVEL, SOG)
    %function-description  
    %br/
    %br/  
    %funtion-name roll
    %function-params (speed, heading, state)
    %function-return  → Simple Response
    %br/ 
    %function-description  This commands Sphero to roll along the provided vector. Both a speed and a heading are required; the latter is considered relative to the last calibrated direction.
    %br/ 
    %br/ 
    %funtion-name runMacro
    %function-params (SEQ, DLEN, ID)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name saveMacro
    %function-params (data)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name saveTemporaryMacro
    %function-params (data)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name selfLevel
    %function-params (Options, Angle Limit, Timeout, True Time), options: ((0 | 1 | 2 |3 ), (0 | 1 to 90), (0 | 1 to 255), (0 | 1 to 255)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setAccelerometerRange
    %function-params (Range Idx), options: 0 | 1 | 2 | 3
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setApplicationConfigurationBlock
    %function-params ()
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setBackLED
    %function-params (BRIGHT)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setBoostWithTime
    %function-params (STATE)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setColor
    %function-params (color)
    %function-return  → Simple Response
    %br/ 
    %function-description This allows you to set the color of the sphero, just pass an array containing RGB hex or a string with one of the color names of the list. 
    %br/
    %br/  
    %funtion-name setConfigurationBlock
    %function-params (value)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setDataStreaming
    %function-params (N, M, MASK, PCNT, MASK2)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setDeviceMode
    %function-params (MODE)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setHeading
    %function-params (HEADING)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setMacroParameter
    %function-params (Param, Val1, Val2)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setMotionTimeout
    %function-params (TIME)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setPermanentOptionFlags
    %function-params (FLAGS)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setRGB 
    %function-params (color, persist)
    %function-return  → Simple Response
    %br/ 
    %function-description This allows you to set the RGB LED color, just pass an array containing RGB hex or a string with one of the color names of the list.  
    %br/
    %br/  
    %funtion-name setRawMotorValues
    %function-params (L-MODE, L-POWER, R-MODE, R-POWER)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setRotationRate
    %function-params (RATE)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setStabalisation
    %function-params (bool)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name setTemporaryOptionFlags
    %function-params (FLAGS)
    %function-return  → Simple Response
    %function-description  
    %br/
    %br/  
    %funtion-name stop 
    %function-params ()
    %function-return  → Simple Response
    %br/ 
    %function-description Stops the sphero.
    %br/
    %br/  
    %funtion-name submitValueToInputStatement
    %function-params (VAL)
    %function-return  → Simple Response
    %function-description  



  %section.public-events
    %h2 Events:
    %ul 
      %li 
        %h3 update
        %small 
          This event will contain one of the following events.
          %br/  
          You can also subscribe to one of the specific events, if that is the information you are interested in.
      %li
        %h3 collision
        %p Gets triggered when the sphero hits something or falls from a step.
      %li
        %h3 messages(data)
        %p 
      %li 
        %h3 notifications(data)
        %p 
      %li 
        %h3 connect
        %p Opens the connection to Sphero.

      %li 
        %h3 start
        %p Sent when the device has been started and is ready to use.  

    -#%h3 How to use events and call them on your drivers
    -#%p
      -#Pretty simple, when the connection and the driver have been setup (as explained above)
      -#you can call events on the sphero driver as follows:
    -#:markdown
          -#:::ruby

  -#%section.how-to
    -#%h2 How to use
    -#%h3 Example to roll the sphero in a random direction and change direction every 3 seconds.
    -#:markdown
          -#:::ruby

  %section 
    %h2 Sphero Colors  

  %section.compatability.hardware
    %h2 Works with:
    =# TODO: Update platform list with all that work with this driver in artoo.
    .devices
      = partial "documentation/partials/sphero"
