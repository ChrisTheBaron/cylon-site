---
title: Cylon.js - Tessel GPS
author: The Hybrid Group
page_title: Tessel Module
page_subtitle: Cylon has a extensible system for connecting to hardware devices.
page_title_docs: Tessel GPS
page_subtitle_docs: Module
layout: documentation
page_title_show: true
active_menu_docs: true
subnavjs: true
subnav_driver: true

tessel_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#tessel li:nth-child(7)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  =image_tag "/images/devices/tessel-gps.jpg", class: "display"
  .info-intro
    %p Detect your global position.
    %p Helps you figure out where you areâ€“ and where you're going!
    %ul
      %li Up to 1.8m accuracy
      %li 66 search channels, 22 tracking channels, -165dBM sensitivity
      %li Max 10Hz update rate
    %p
      For more info visit
      = link_to "here.", "http://start.tessel.io/modules/gps", target: :blank
  .clear

%section.how-to#HowToConnect
  %h2 How To Connect
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'tessel', adaptor: 'tessel', port: 'A' },
          device: { name: 'gps', driver: 'gps-a2235h' },
        ...


%section.how-to#HowToUse
  %h2 How To Use
  %p Example using a Direct Pin.
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'tessel', adaptor: 'tessel', port: 'A' },
          device: { name: 'gps', driver: 'gps-a2235h' },

          work: function(my) {
            var satsInRange = 0;
            var satsFixed = 0;

            console.log('GPS module powered and ready. Waiting for satellites...');

            my.gps.on('error', function (err) {
              console.log(err)
            });

            // Emit coordinates when we get a coordinate fix
            my.gps.on('coordinates', function (coords) {
              console.log('Lat:', coords.lat, '\tLon:', coords.lon, '\tTimestamp:', coords.timestamp);
            });

            // Emit altitude when we get an altitude fix
            my.gps.on('altitude', function (alt) {
              console.log('Got an altitude of', alt.alt, 'meters (timestamp: ' + alt.timestamp + ')');
            });

            // Emitted whenever satellites are in view
            my.gps.on('satellite-list-partial', function (data) {
              satsInRange = data.satsInView;
              console.log(satsInRange, 'satellites in range,', satsFixed, 'fixed.');
            });

            // Emitted when we have information about a fix on satellites
            my.gps.on('fix', function (data) {
              satsFixed = data.numSat;
              console.log(satsInRange, 'satellites in range,', satsFixed, 'fixed.');
            });
          }
        }).start();

%section.public-methods
  .commands-api#Commands
    %h1 Commands
    %h2 gps.powerOff( callback() )
    %p Turns the GPS chip off.

    %h2 gps.powerOn( callback() )
    %p Turns the GPS chip on.

    %h2 gps.setCoordinateFormat( format, callback() )
    %p Configure how the module reports latitude and longitude: options are 'deg-min-sec', 'deg-min-dec', and 'deg-dec'.
  .commands-api#Events
    %h1 Events
    %h2 gps.on( 'altitude', callback(altitudeObj) )
    %p Emitted when altitude data is available. Emitted in the form {altitude in meters, timestamp}.

    %h2 gps.on( 'coordinates', callback(coordinateObj) )
    %p Emitted when coordinate data is available. Emitted in the form {latitude, longitude, timestamp}.

    %h2 gps.on( 'error', callback(err) )
    %p Emitted upon error.

    %h2 gps.on( 'powerOff', callback() )
    %p Emitted when the module has been powered off.

    %h2 gps.on( 'powerOn', callback() )
    %p Emitted when the module has been powered on.

    %h2 gps.on( 'ready', callback() )
    %p Emitted upon first successful communication between the Tessel and the module.

    %h4 Also emits parsed NMEA objects by type:

    %h2 gps.on( 'active-satellites', callback(data) )
    %p NMEA GPGSA: GPS DOP and active satellites.

    %h2 gps.on( 'fix', callback(data) )
    %p NMEA GPGGA: Global positioning system fix data.

    %h2 gps.on( 'nav-info', callback(data) )
    %p NMEA GPRMC: Recommended minimum specific GPS/Transit data.

    %h2 gps.on( 'satellite-list-partial', callback(data) )
    %p NMEA GPGSV: GPS satellites in view.

    %h2 gps.on( 'track-info', callback(data) )
    %p NMEA GPVTG: Track made good and ground speed.

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    = partial "documentation/partials/devices_platforms"
