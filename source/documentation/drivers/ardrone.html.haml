---
title: Cylon.js - ARDrone Driver
author: The Hybrid Group
page_title: ARDrone
page_subtitle: Driver
layout: page
---
.documentation
  %section.intro
    =image_tag "/images/ardrone-flight.jpg", class: "display"
    %p
      Allows user to send flight control commands to an ARDrone. Flight control commands are those used to tell the ARDrone to take off, land, and or any number of other autonomous flight manuvers.

  %section.how-to
    %h2 How to establish a connection and setup the driver
    %p
      Communication with the ARDrone's flight control interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.
    
    %h3 JavaScript
    :markdown
          :::javascript
          var Cylon = require('cylon');

          Cylon.robot({
            connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},

            device: {name: 'ardrone', driver: 'ardrone'},
          ...

    %h3 CoffeeScript
    :markdown
          :::javascript
          Cylon = require 'cylon'

          Cylon.robot
            connection:
              name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

            device:
              name: 'ardrone', driver: 'ardrone'
          ...

  %section.public-methods
    %h2 Commands:

    %dl.methods 
      %dt takeoff(callback)
      %dd 
        :markdown
          Sets the internal `fly` state to `true`, `callback` is invoked after the drone reports that it is hovering.
      %dt land(callback)
      %dd 
        :markdown
          Sets the internal `fly` state to `false`, `callback` is invoked after the drone reports it has landed.
      %dt stop
      %dd 
        :markdown
          Sets all drone movement commands to `0`, making it effectively hover in place.
      %dt up(speed) 
      %dd 
        Makes the drone gain altitude. 
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt down(speed) 
      %dd 
        Makes the drone reduce altitude. 
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt left(speed) 
      %dd  
        Causes the drone to bank to the left, controls the roll, which is a horizontal movement using the camera as a reference point. 
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt right(speed) 
      %dd 
        Causes the drone to bank to the right, controls the roll, which is a horizontal movement using the camera as a reference point. 
        :markdown
          `speed`can be a value from `0` to `1`.
      %dt front(speed) 
      %dd 
        Causes the drone to bank to the front, controls the pitch, which a horizontal movement using the camera as a reference point. 
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt back(speed) 
      %dd 
        Causes the drone to bank to the back, controls the pitch, which a horizontal movement using the camera as a reference point. 
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt clockwise
      %dd 
        Causes the drone to spin.
        :markdown
          `speed` can be a value from `0` to `1`.
      %dt counterClockwise
      %dd Causes the drone to spin. speed can be a value from 0 to 1.
      %dt calibrate
      %dd 
      %dt config
      %dd 
      %dt animate
      %dd 
      %dt animateLeds
      %dd 
      %dt disableEmergency
      %dd 

    %h2 Events

    %dl.methods 
      %dt start
      %dd Sent when the device has been started and is ready to use.  
                     

  %section.how-to
    %h2 How to use
    %p 
      This example controls an ARDrone to take off, and then land.

    %h3 JavaScript
    :markdown
          :::javascript
          var Cylon = require('cylon');

          Cylon.robot({
            connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},
            device: {name: 'drone', driver: 'ardrone'},
            work: function(my) {
              my.drone.takeoff();

              after((10).seconds(), function() {
                my.drone.land();
              }

              after((15).seconds(), function() {
                my.drone.stop();
              }
            }
          }).start();

    %h3 CoffeeScript
    :markdown
          :::javascript
          Cylon = require 'cylon'

          Cylon.robot
            connection:
              name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

            device:
              name: 'drone', driver: 'ardrone'

            work: (my) ->
              my.drone.takeoff()

              after 10.seconds(), ->
                my.drone.land()

              after 15.seconds(), ->
                my.drone.stop()

          .start()

  %section.compatability.hardware
    %h2 Works with:
    .devices
      = partial "documentation/partials/ardrone"
