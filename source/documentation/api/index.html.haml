---
title: Cylon.js API
author: The Hybrid Group
page_title: API
page_subtitle: "The Cylon API provides an interface for retrieving information and communicating with the currently running robots."
layout: documentation
page_title_show: true
---

:markdown
  ## How To Connect

  Now you're ready to write code that will let you access your robots on a Cylon.js API server.

  ### Running your robot:

  To run your script, use one of the following commands:

  #### Javascript

      node robotfilename.js

  #### CoffeeScript

      coffee robotfilename.coffee

  Both of the following code examples will spin up an API server.

  #### Javascript
      :::javascript
      var Cylon = require('..');

      Cylon.robot({
        connection: { name: 'looped', adaptor: 'loopback'},

        work: function() {
          every((1).second(), function() { console.log("Hello, human!"); });
        }
      });

      Cylon.start();

  #### CoffeeScript

      :::javascript
      Cylon = require('cylon')

      Cylon.robot
        work: ->
          every 1.second(), ->
            console.log "Hello, human!"

      Cylon.start()

  `Cylon.start()` automatically starts up the API server.

  ## How To Configure

  The Cylon.js API server allows for port and host configuration.

  In your scripts, you can set it up like this:

      :::javascript
      Cylon.api(host: '127.0.0.1', port: '4321')

  Now, when you run the script, your server will be listening at
  `http://127.0.0.1:4321`.

  ## Routes

  ### GET /robots

  Our first route returns all the Robots the master class knows about in JSON
  format.

      [
        {
          "name": "SpheroBot",
          "connections": [
            {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            }
          ],
          "devices": [
            {
              "name": "sphero",
              "driver": "Sphero",
              "pin": null,
              "connection": {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              },
              "commands": [
                "detectCollisions",
                "roll",
                "setColor",
                "setRGB",
                "stop"
              ]
            }
          ]
        }
      ]

  ### GET /robots/:robotname

  Given a robot's name, returns JSON information about the requested Robot:

      {
        "name": "SpheroBot",
        "connections": [
          {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          }
        ],
        "devices": [
          {
            "name": "sphero",
            "driver": "Sphero",
            "pin": null,
            "connection": {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            },
            "commands": [
              "detectCollisions",
              "roll",
              "setColor",
              "setRGB",
              "stop"
            ]
          }
        ]
      }

  ### GET /robots/:robotname/commands

  Given a robot's name, returns JSON information about the commands belonging to
  the requested Robot:

      [
        "detectCollisions",
        "roll",
        "setColor",
        "setRGB",
        "stop"
      ]

  ### POST /robots/:robotname/commands/:commandname

  Given a robot name, commands, and command name, executes a robot's command
  and returns the result.

      {
        result: "successful"
      }

  ### GET /robots/:robotname/devices

  Given a robot's name, returns JSON information about the devices belonging to
  the requested Robot:

      [
        {
          "name": "sphero",
          "driver": "Sphero",
          "pin": null,
          "connection": {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          },
          "commands": [
            "detectCollisions",
            "roll",
            "setColor",
            "setRGB",
            "stop"
          ]
        }
      ]

  ### GET /robots/:robotname/devices/:devicename

  Given the names of a device and the robot it belongs to, returns data on the
  specified device.

      {
        "name": "sphero",
        "driver": "Sphero",
        "pin": null,
        "connection": {
          "name": "sphero",
          "port": "/dev/rfcomm0",
          "adaptor": "Sphero",
          "connection_id": 2778
        },
        "commands": [
          "detectCollisions",
          "roll",
          "setColor",
          "setRGB",
          "stop"
        ]
      }

  ### GET /robots/:robotname/devices/:devicename/commands

  Given the names of a device and the robot it belongs to, returns all commands
  available for the specified device.

      [
        "detectCollisions",
        "roll",
        "setColor",
        "setRGB",
        "stop"
      ]

  ### POST /robots/:robotname/devices/:devicename/commands/:commandname

  Given a robot name, device name, and command name, executes a robot's command
  and returns the result.

      {
        result: "successful"
      }

  ### GET /robots/:robotname/connections

  Given a robot's name, returns JSON information about the connections belonging
  to the requested Robot:

      [
        {
          "name": "sphero",
          "port": "/dev/rfcomm0",
          "adaptor": "Sphero",
          "connection_id": 2778
        }
      ]

  ### GET /robots/:robotname/connections/:connectionname

  Given a robot's name, returns JSON information about the connections belonging
  to the requested Robot:

      {
        "name": "sphero",
        "port": "/dev/rfcomm0",
        "adaptor": "Sphero",
        "connection_id": 2778
      }

  ### GET /robots/:robotname/devices/:devicename/events

  Routes to a Socket.IO route to handle WebSockets connections requesting updates
  on device events.

  ### WS_GET /events

  A Socket.IO route to handle updating clients whenever a device sends
  an 'update' event.
