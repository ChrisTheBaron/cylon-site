---
title: Cylon.js API
author: The Hybrid Group
page_title: API
page_subtitle: "The Cylon API provides an interface for retrieving information and communicating with the currently running robots."
layout: documentation
page_title_show: true
---
.api
  :markdown
    ## How To Connect

    Now you're ready to write code that will let you access your robots on a Cylon.js API server.

    ### Running your robot:

    The following code example will spin up an API server:

        :::javascript
        var Cylon = require('..');

        Cylon.robot({
          connection: { name: 'looped', adaptor: 'loopback'},

          work: function() {
            every((1).second(), function() { console.log("Hello, human!"); });
          }
        });

        Cylon.start();

    `Cylon.start();` automatically starts up the API server.

    ## How To Configure

    The Cylon.js API server allows for port, host, SSL and auth configuration.

    In your scripts, you can set it up like this:

        :::javascript
        Cylon.api(
          host: '127.0.0.1',
          port: '4321',

          cert: '/path/to/ssl/cert',
          key: '/path/to/ssl/key',

          auth: {
            type: 'basic',
            user: 'admin',
            pass: 'pass'
          }
        )

    If you run a Cylon script with this code in it, it will start an API server
    listening on `https://127.0.0.1:4321`, that will require basic auth for all
    routes.

    By default, an unconfigured API instance will listen on
    `https://127.0.0.1:3000`, using a self-signed cert and with no
    authentication.

    ## Routes

    ### GET /

    This route will serve up the Angular app bundled with Cylon, which can be used
    to view and control your robots and devices.

    <a href="/images/screenshots/api-ng-app.png" target="_blank">
      <img alt="Angular App Screenshot" src="/images/screenshots/api-ng-app.png">
    </a>

    ### GET /robots

    Our first route returns all the Robots the master class knows about in JSON
    format.

        [
          {
            "name": "SpheroBot",
            "connections": [
              {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              }
            ],
            "devices": [
              {
                "name": "sphero",
                "driver": "Sphero",
                "pin": null,
                "connection": {
                  "name": "sphero",
                  "port": "/dev/rfcomm0",
                  "adaptor": "Sphero",
                  "connection_id": 2778
                },
                "commands": [
                  "detectCollisions",
                  "roll",
                  "setColor",
                  "setRGB",
                  "stop"
                ]
              }
            ]
          }
        ]

    ### GET /robots/:robotname

    Given a robot's name, returns JSON information about the requested Robot:

        {
          "name": "SpheroBot",
          "connections": [
            {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            }
          ],
          "devices": [
            {
              "name": "sphero",
              "driver": "Sphero",
              "pin": null,
              "connection": {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              },
              "commands": [
                "detectCollisions",
                "roll",
                "setColor",
                "setRGB",
                "stop"
              ]
            }
          ]
        }

    ### GET /robots/:robotname/commands

    Given a robot's name, returns JSON information about the commands belonging to
    the requested Robot:

        [
          "detectCollisions",
          "roll",
          "setColor",
          "setRGB",
          "stop"
        ]

    ### POST /robots/:robotname/commands/:commandname

    Given a robot name, commands, and command name, executes a robot's command
    and returns the result.

        {
          result: "successful"
        }

    ### GET /robots/:robotname/devices

    Given a robot's name, returns JSON information about the devices belonging to
    the requested Robot:

        [
          {
            "name": "sphero",
            "driver": "Sphero",
            "pin": null,
            "connection": {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            },
            "commands": [
              "detectCollisions",
              "roll",
              "setColor",
              "setRGB",
              "stop"
            ]
          }
        ]

    ### GET /robots/:robotname/devices/:devicename

    Given the names of a device and the robot it belongs to, returns data on the
    specified device.

        {
          "name": "sphero",
          "driver": "Sphero",
          "pin": null,
          "connection": {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          },
          "commands": [
            "detectCollisions",
            "roll",
            "setColor",
            "setRGB",
            "stop"
          ]
        }

    ### GET /robots/:robotname/devices/:devicename/commands

    Given the names of a device and the robot it belongs to, returns all commands
    available for the specified device.

        [
          "detectCollisions",
          "roll",
          "setColor",
          "setRGB",
          "stop"
        ]

    ### POST /robots/:robotname/devices/:devicename/commands/:commandname

    Given a robot name, device name, and command name, executes a robot's command
    and returns the result.

        {
          result: "successful"
        }

    ### GET /robots/:robotname/connections

    Given a robot's name, returns JSON information about the connections belonging
    to the requested Robot:

        [
          {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          }
        ]

    ### GET /robots/:robotname/connections/:connectionname

    Given a robot's name, returns JSON information about the connections belonging
    to the requested Robot:

        {
          "name": "sphero",
          "port": "/dev/rfcomm0",
          "adaptor": "Sphero",
          "connection_id": 2778
        }

    ### GET /robots/:robotname/devices/:devicename/events

    Routes to a Socket.IO route to handle WebSockets connections requesting updates
    on device events.

    ### WS_GET /events

    A Socket.IO route to handle updating clients whenever a device sends
    an 'update' event.
