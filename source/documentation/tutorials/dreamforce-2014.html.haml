---
title: Cylon.js - Tutorials
author: The Hybrid Group
page_title: Dreamforce 2014
page_subtitle: Workshop
layout: documentation
page_title_show: true
---

%section.dreamforce
  %h2 Connect Salesforce to Intel Edison In 60 Lines Of JavaScript

  %p Welcome! In this workshop, we're going to show you how to create a Salesforce connected device, using the brand new Intel Edison, in 60 lines of JavaScript. Plus we're going to have some fun too.

%section.dreamforce
  %h2 Getting Started
  %ul
    %li
      %p
        We have provided an Intel Edison with Arduino Breakout Board, 2 USB Cables, and a Grove Starter Kit to participate in this workshop.

    %li
      %p
        We have already plugged in each Intel Edison to the workshop computers, so they are ready for you to use.

    %li
      %p
        The computers in the workshop area also already have pre-installed the Intel XDK (Cross-platform Developer Kit) IoT Edition, and the needed drivers for Microsoft Windows.

    %li
      %p
        Now, run the "Intel XDK IoT Edition" program. You will need to register for an account, or else sign in using your existing Intel account, if you have one.

%section.dreamforce
  %h2 Create A Blank Project
  %ul
    %li
      %p
        First, we need to create a new project. Choose "New Project".

    %li
      %p
        Click on "Start With A Sample Or Template" in the "Internet Of Things (IoT) with Node.js Projects.

    %li
      %p
        Click on "Blank Template", and then click on "Use This Template".

    %li
      %p
        Enter in a name for this project, such as "df14", then click on the "Create" button.

    %li
      %p
        Click on the file named "package.json". The file will open in the XDK editor. Copy the following code, and paste into your editor, replacing all of the code already in the "package.json" file:

      %h3 package.json
      :markdown
            :::javascript
            {
              "name": "blankapp",
              "description": "",
              "version": "0.0.1",
              "main": "main.js",
              "engines": {
                "node": ">=0.10.0"
              },
              "dependencies": {
                  "cylon-intel-iot", "*"
              }
            }  


%section.dreamforce
  %h2 Blinking LED
  %p Let's start with the 'Hello, World' of the Internet of Things: making an LED blink. 

  %ul
    %li
      %p Plug the LED that is included with the Grove Starter Kit into the jack labeled 'XXX', like this:

      %img{:src => "/images/tutorials/df14/led.png", :alt => "", :style => "width:50%"}

    %li
      %p Enter the following code into the Intel XDK editor into the file named "main.js", replacing everything in the file:

      %h3 main.js
      :markdown
            :::javascript
            // replace

    %li
      %p Click on the "Install/Build" icon located at the bottom of the XDK editor. This will install the needed Cylon.js software on the Edison, as well as copying your code.

    %li
      %p Now, click on the "Run" icon located at the bottom of the XDK editor.

  %p The Cylon.js program will execute on the Edison itself, and will make the LED turn on/off every second.

%section.dreamforce
  %h2 LED + Touch Sensor
  %p Now, let's add a touch sensor, so you can control when the LED turns on or off yourself. 

  %ul
    %li
      %p Leave the LED plugged in, and plug in the touch sensor that is included with the Grove Starter Kit, into the jack labeled 'XXX', like this:

      %img{:src => "/images/tutorials/df14/touch.png", :alt => "", :style => "width:50%"}

    %li
      %p Now, enter this code into the Intel XDK editor for the file "main.js", replacing everything:

      %h3 main.js
      :markdown
            :::javascript
            // code here...

    %li
      %p At the top of the "main.js" file, change the "name" located at line X to the name written on your Edison box, for example "cylon1".

    %li
      %p Also, change the "sfusername" and "sfpassword" located at line X and Y to the Salesforce username you were given for this workshop.

    %li
      %p Click on the "Run" icon located at the bottom of the XDK editor.

  %p Once the program is running, you should be able to turn the LED on or off, by touching the sensor with your finger.


%section.dreamforce
  %h2 Salesforce + LED + Touch Sensor
  %p Now, we're ready to connect our device to Salesforce. Leave the touch sensor and LED plugged in. All we will need is to change the program to connect our device to the Salesforce Apex & Streaming APIs.

  %p Now, enter this code into the Intel XDK editor, then make sure you change the code for the SalesForce username and password you have been given to use for this workshop. Once the program is running, now when you press the sensor, it communcates with the Salesforce cloud, and then turns the LED on or off, when the Salesforce API sends an update:

  %h3 JavaScript
  :markdown
        :::javascript
        var cylon = require('cylon');

        cylon.robot({
          name: 'cylon1',
          connections: [
            { name: 'edison', adaptor: 'intel-iot' },
            {
              name: 'sfcon', adaptor: 'force',
              sfuser: SF_USERNAME,
              sfpass: SF_SECURITY_TOKEN
            }
          ],
          device: [
            { name: 'salesforce', driver: 'force', connection: 'sfcon' },
            { name: 'led', driver: 'led', pin: 4, connection: 'edison' },
            { name: 'touch', driver: 'button', pin: 3, connection: 'edison' },
          ]
        })
          .on('ready', function() {
            this.salesforce.subscribe('BoardMsgOutbound', function(err, data) {
              if (err != null) {
                console.log(err);
              } else if (data.sobject.boardId__c === this.name) {
                if (data.sobject.touchSensor__c === 1) {
                  this.led.turnOn();
                } else if (data.sobject.touchSensor__c === 0) {
                  this.led.turnOff();
                }
              }
            }.bind(this));

            this.touch.on('press', function() {
              var toSend = {
                boardId: this.name,
                touchSensor: 1
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));

            this.touch.on('release', function() {
              var toSend = {
                boardId: this.name,
                touchSensor: 0
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));
          })
          .start();


%section.dreamforce
  %h2 Salesforce + LED + Button + Analog Sensor
  %p Now, let's add an 'analog sensor'. An analog sensor allows you to have not just an 'on or off' signal, but actually send a range, like the control dial on a thermostat.

  %p Plug in the small dial that is included with the Grove Starter Kit into the jack labeled 'XXX', like this:

  %img{:src => "/images/tutorials/df14/dial.png", :alt => "", :style => "width:50%"}

  %p Enter the following code into the Intel XDK editor. Remember to change the Salesforce username & password on line 10 to the one provided for the workshop. Now upload and run the program. Once the program is running, you should be able to turn the dial to send a new value to Salesforce every 2 seconds. You can also still turn the LED on or off, by pressing the button, sinec both data sources are going thru Salesforce:

  %h3 JavaScript
  :markdown
        :::javascript
        var cylon = require('cylon');

        cylon.robot({
          name: 'cylon1',
          connections: [
            { name: 'edison', adaptor: 'intel-iot' },
            {
              name: 'sfcon', adaptor: 'force',
              sfuser: SF_USERNAME,
              sfpass: SF_SECURITY_TOKEN
            }
          ],
          device: [
            { name: 'salesforce', driver: 'force', connection: 'sfcon' },
            { name: 'led', driver: 'led', pin: 4, connection: 'edison' },
            { name: 'touch', driver: 'button', pin: 3, connection: 'edison' },
            { name: 'sensor', driver: 'analogSensor', pin: 0, connection: 'edison' }
          ]
        })
          .on('ready', function() {
            var ready = false;
            var sensorVal = 0;
            this.salesforce.subscribe('BoardMsgOutbound', function(err, data) {
              if (err != null) {
                console.log(err);
              } else if (data.sobject.boardId__c === this.name) {
                if (data.sobject.touchSensor__c === 1) {
                  this.led.turnOn();
                } else if (data.sobject.touchSensor__c === 0) {
                  this.led.turnOff();
                }
                var sensor = data.sobject.analogSensor__c;
                if (sensor != null) {
                  console.log("Reading: " + sensor);
                }
              }
            }.bind(this));

            this.touch.on('press', function() {
              ready = true;
              var toSend = {
                boardId: this.name,
                touchSensor: 1
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));

            this.touch.on('release', function() {
              ready = false;
              var toSend = {
                boardId: this.name,
                touchSensor: 0
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));

            this.sensor.on('analogRead', function(data) {
              sensorVal = data;
            });

            setInterval(function() {
              if (ready) {
                var toSend = {
                  message: this.name,
                  analog2: sensorVal
                };
                this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending analog sensor information: " + err);
                }
                });
              }
            }.bind(this), 2000);
          })
          .start();



%section.dreamforce
  %h2 Salesforce + LED + Button + Analog Sensor + LCD Display
  %p Finally, let's add a backlit LCD display, so we can display some useful data on the device itself.

  %p Plug in the LCD Display that is included with the Grove Starter Kit into the jack labeled 'XXX', like this:

  %img{:src => "/images/tutorials/df14/lcd.png", :alt => "", :style => "width:50%"}

  %p Enter the following code into the Intel XDK editor. Once again, please remember to change the Salesforce username & password on line 10 to the one provided for the workshop. Now upload and run the program. Once the program is running, the values that you change by moving the dial, will be displayed on the LCD display. As before, you can still turn the LED on or off.

  %h3 JavaScript
  :markdown
        :::javascript
        var cylon = require('cylon');

        function writeToScreen(screen, message) {
          screen.setCursor(0,0);
          screen.write(message);
        }

        cylon.robot({
          name: 'cylon1',
          connections: [
            { name: 'edison', adaptor: 'intel-iot' },
            {
              name: 'sfcon', adaptor: 'force',
              sfuser: SF_USERNAME,
              sfpass: SF_SECURITY_TOKEN
            }
          ],
          device: [
            { name: 'salesforce', driver: 'force', connection: 'sfcon' },
            { name: 'led', driver: 'led', pin: 4, connection: 'edison' },
            { name: 'touch', driver: 'button', pin: 3, connection: 'edison' },
            { name: 'sensor', driver: 'analogSensor', pin: 0, connection: 'edison' }
            { name: 'screen', driver: 'upm-jhd1313m1', connection: 'edison' }
          ]
        })
          .on('ready', function() {
            var ready = false;
            var sensorVal = 0;

            writeToScreen(this.screen, "Ready!");

            this.salesforce.subscribe('BoardMsgOutbound', function(err, data) {
              if (err != null) {
                console.log(err);
              } else if (data.sobject.boardId__c === this.name) {
                if (data.sobject.touchSensor__c === 1) {
                  this.led.turnOn();
                } else if (data.sobject.touchSensor__c === 0) {
                  this.led.turnOff();
                }
                var sensor = data.sobject.analogSensor__c;
                if (sensor != null) {
                  var pad = "0000";
                  var message = "Reading: " + (pad+sensor.toString()).slice(-pad.length));
                  writeToScreen(this.screen, message);
                  console.log(message);
                }
              }
            }.bind(this));

            this.touch.on('press', function() {
              ready = true;
              var toSend = {
                boardId: this.name,
                touchSensor: 1
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));

            this.touch.on('release', function() {
              ready = false;
              var toSend = {
                boardId: this.name,
                touchSensor: 0
              };
              this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending touch sensor information: " + err);
                } else {
                  console.log('Board Msg has been sent to Salesforce.');
                }
              });
            }.bind(this));

            this.sensor.on('analogRead', function(data) {
              sensorVal = data;
            });

            setInterval(function() {
              if (ready) {
                var toSend = {
                  message: this.name,
                  analog2: sensorVal
                };
                this.salesforce.post('/Boards/', toSend, function(err, data) {
                if (err != null) {
                  console.log("Error sending analog sensor information: " + err);
                }
                });
              }
            }.bind(this), 2000);
          })
          .start();

