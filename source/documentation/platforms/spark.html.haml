---
title: Spark with Cylon.js
author: The Hybrid Group
page_title: Spark
page_subtitle: "<a href='https://github.com/hybridgroup/cylon-spark' target='blanck' class='repository'>Repository</a> <a class='issues' href='https://github.com/hybridgroup/cylon-spark/issues' target='blanck'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true

analog_sensor_driver: true
button_driver: true
continuous_servo_driver: true        
led_driver: true
maxbotix_driver: true
motor_driver: true
servo_driver: true 
---

%section.intro
  = image_tag "/images/devices/spark.jpg", class: "display"
  .info_intro
    %p The Spark Core contains a Wi-Fi connected microcontroller. Once it connects to a Wi-Fi network, it automatically connects with a central server (the "Spark Cloud") and stays connected so it can be controlled from external systems, such as a Cylon.js program.

    %p
      For more info about the Spark platform go to
      = succeed "." do
        = link_to "https://www.spark.io/", "https://www.spark.io/", target: :blank
  .clear
  
%section.how-to#HowToInstall
  %h2 How To Install
  %p Installing Cylon.js with Spark support is pretty easy.
  :markdown
        :::ruby
        npm install cylon-spark

%section.how-to#HowToUse
  %h2 How To Use
  %p This small program lets you turn on or off a LED for every 1 sec.
  %h3 Javascript  
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'spark', adaptor: 'spark', accessToken: 'XYZPDQ123', deviceId: '123ABC456' },
          device: {name: 'led', driver: 'led', pin: 'D0'},

          work: function(my) {
            every((1).second(), function() {my.led.toggle()});
          }
        }).start();

  %h3 CoffeeScript
  :markdown
        :::ruby
        Cylon = require('cylon')

        Cylon.robot
          connection:
            name: 'spark', adaptor: 'spark', accessToken: 'XYZPDQ123', deviceId: '123ABC456'

          device:
            name: 'led', driver: 'led', pin: 'D0'

          work: (my) ->
            every 1.second(), -> my.led.toggle()

        .start()


%section.public-methods#PublicMethods
  .commands_api
    = partial "/documentation/drivers/partials/spark/commands"
  <br>
  <strong>Note:</strong> In addition to the above methods, the Spark adaptor supports the full GPIO pin interface, as long as you are using Tinker, or a Tinker compatible program running on the Spark itself.

%section.how-to#HowToConnect
  %h2 Uploading
  %h3 Uploading Code To Your Spark Core Using the Cylon CLI

  :markdown
        :::bash
        $ cylon spark upload [access_token] [device_id] new_firmware.cpp

  %p The <code>cylon spark upload</code> command can help if you want to upload new source code directly to your Spark Core.

  %p 
    For more information on how to program your Spark, please see
    = link_to "Spark's examples", "http://docs.spark.io/#/examples", target: :blank

  %p 
    You'll need your <code>access_token</code> and <code>device_id</code> to push new software to your Spark, and you can get both of these from Spark's 
    = link_to "Build tool", "https://spark.io/build", target: :blank    

  %ul
    %li <code>access_token:</code> In the Build tool, click on the Settings cog in the bottom-left corner to find your access token.
    %li <code>device_id:</code> After you have your Spark Core registered to your account through the Tinker app, click on the Cores section (just above the Settings cog) on the Build tool. Then, click on the arrow next to your core's name to get its device ID.


%section.drivers#Drivers
  %h2 Drivers
  
  %p Available drivers for the spark platform are listed below, the drivers contain detailed documentation and examples of what kinds of physical computing (using Cylon.js and Node.js) you can be doing:

  .hardware
    %h2 GPIO Drivers
    .devices
      = partial "documentation/partials/devices_gpio_drivers"
