---
title: Skynet with Cylon.js
author: The Hybrid Group
page_title: Skynet
page_subtitle: "<a href='https://github.com/hybridgroup/cylon-skynet' class='repository'>Repository</a> <a class='issues' href='https://github.com/hybridgroup/cylon-skynet/issues'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true

---

%section.intro
  = image_tag "/images/devices/skynet.jpg", class: "display"
  .info_intro
    %p Open Communications Networ and API for the internet of things.
    %p
      For more info about the Skynet platform click
      = succeed "." do
        = link_to "here", "http://skynet.im/", target: :blank
  .clear

%section.how-to#HowToInstall
  %h2 How To Install
  %p Install the module with: 
  :markdown
        :::bash
        npm install cylon-skynet


%section.how-to#HowToUse
  %h2 How To Use
  %h3 JavaScript
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connections: [
            { name: 'arduino', adaptor: 'firmata', port: '/dev/ttyACM0' },
            { name: 'skynet', adaptor: 'skynet', uuid: "742401f1-87a4-11e3-834d-670dadc0ddbf", token: "xjq9h3yzhemf5hfrme8y08fh0sm50zfr" }
          ],

          device: { name: 'led', driver: 'led', pin: 13, connection: 'arduino' },

          work: function(my) {
            my.skynet.on('message', function(channel, data) {
              if(data.red == 'on') {
                my.led.turnOn()
              }
              else if(data.red == 'off') {
                my.led.turnOff()
              }
            });
          }
        }).start();

  %h3 CoffeeScript
  :markdown
        :::ruby
        Cylon = require 'cylon'

        Cylon.robot
          connections: [
            { name: 'arduino', adaptor: 'firmata', port: '/dev/ttyACM0' },
            { name: 'skynet', adaptor: 'skynet', uuid: "742401f1-87a4-11e3-834d-670dadc0ddbf", token: "xjq9h3yzhemf5hfrme8y08fh0sm50zfr" }
          ]

          device: { name: 'led', driver: 'led', pin: 13, connection: 'arduino' }

          work: (my) ->
            my.skynet.on 'message', (channel, data) ->
              if data.red is 'on'
                my.led.turnOn()
              else if data.red is 'off'
                my.led.turnOff()

        .start()

%section.public-methods
  .commands_api
    %h1 Events
    %h2 constructor
    %p Generates the specifications.
    %h2 connect(callback)
    %p  Creates a connection to Skynet.
    %h2 message(channel, data)
    %p Receives notification.

    %h1 Methods
    %h2 message(data)
    %p Generates a message.


%section.how-to#HowToConnect
  %h2 How To Connect
  %p First, you need to register a device on the Skynet network. You can do this with a curl command similar to this one:
  :markdown
        :::bash
        curl -X POST -d "name=arduino&led=off" http://skynet.im/devices

    This will return the new registration information for the device, most importantly the `uuid` and `token`:

        :::bash
        => {"name":"arduino","led":"off","uuid":"8220cff0-2939-11e3-88cd-0b8e5fdfd7d4","timestamp":1380481272431,"token":"1yw0nfc54okcsor2tfqqsuvnrcf2yb9","online":false,"_id":"524878f8cc12f0877f000003"}

%section.drivers#Drivers
  %h2 Drivers
  %p No drivers

  
