---
title: Cylon.js CLI
author: The Hybrid Group
page_title: Guides - Command Line Interface
page_subtitle: A Guide by Humans, for Humans currently running robots.
layout: documentation
page_title_show: true
active_menu_docs: true
---
.cli
  :markdown
    # What Is It?

    Cylon works hand-in-hand with [Gort](http://gort.io), our command-line toolkit for "RobotOps", a.k.a. "DevOps for Robotics"
    You can use it to scan for hardware, connect to devices, update firmware, and more!

    Cylon also has it's own CLI tool, used to generate new modules.

    This page will be talking about the Cylon-CLI tool, but if you'd like to find out more about Gort, check out [its site](http://gort.io).

    ## How To Install

    You can install the Cylon CLI tool through NPM.
    It's preferred to install it globally, to ensure the tool is available to you everywhere:

        $ [sudo] npm install -g cylon-cli

    After installing this, you should have the `cylon` command available.

    ## Usage

    The `cylon` command is run with a directory argument.
    It will then create a new Cylon module in this directory, prompting for confirmation if the target directory isn't empty.

          $ cylon leapmotion
            create : leapmotion
            create : leapmotion/.gitignore
            create : leapmotion/.jshintrc
            create : leapmotion/Makefile
            create : leapmotion/package.json
            create : leapmotion/lib
            create : leapmotion/lib/index.js
            create : leapmotion/lib/adaptor.js
            create : leapmotion/lib/driver.js
            create : leapmotion/spec
            create : leapmotion/spec/helper.js
            create : leapmotion/spec/lib
            create : leapmotion/spec/lib/index.spec.js
            create : leapmotion/spec/lib/adaptor.spec.js
            create : leapmotion/spec/lib/driver.spec.js

    Without a directory argument, `cylon` assumes you want to create the module in the current working directory.

    Running the command with the `-h` flag will provide a list of options:

        $ cylon -h

          Usage: cylon [dir]

          Options:

            -h, --help       output usage information
            -v, --version    output the version number
            -f, --force      force on non-empty directory
